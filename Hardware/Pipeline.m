function [dataOut, validOut, lpOut, hpOut , derOut, sqOut, intOut, notchOut, fir_lp_out, valid_fir_lp] = Pipeline(dataIn, validIn)
    persistent HP_dsp LP_dsp der_dsp int_dsp notch_dsp fir_lp_dsp

    % Carica i coefficienti statici
    S = coder.load("QuantizedSOS.mat");
    N = int16(18); F = int16(16);
    
    N_out=int16(32);
    F_out=int16(18);

    numeric_iir=numerictype(1,N_out,F_out);
    numeric_fir=numerictype(1,N_out,F_out);
    
    if isempty(notch_dsp)
        notch_dsp = dsphdl.BiquadFilter(...
            'Numerator', S.b_52, 'Denominator', S.a_52, ...
            'ScaleValues', 1, 'Structure', 'Direct form II', ...
            'NumeratorDataType', 'Custom', 'DenominatorDataType', 'Custom', ...
            'ScaleValuesDataType', 'Custom', ...
            'AccumulatorDataType', 'Custom', 'OutputDataType', 'Custom', ...
            'CustomNumeratorDataType', numerictype(1,N,F), ...
            'CustomDenominatorDataType', numerictype(1,N,F), ...
            'CustomScaleValuesDataType', numerictype(1,N,F), ...
            'CustomAccumulatorDataType', numeric_iir, ...
            'CustomOutputDataType', numeric_iir);
    end

    if isempty(HP_dsp)
        HP_dsp = dsphdl.BiquadFilter(...
            'Numerator', S.sos_hp(:,1:3), 'Denominator', S.sos_hp(:,4:6), ...
            'ScaleValues', S.g_hp, 'Structure', 'Direct form II', ...
            'NumeratorDataType', 'Custom', 'DenominatorDataType', 'Custom', ...
            'ScaleValuesDataType', 'Custom', ...
            'AccumulatorDataType', 'Custom', 'OutputDataType', 'Custom', ...
            'CustomNumeratorDataType', numerictype(1,N,F), ...
            'CustomDenominatorDataType', numerictype(1,N,F), ...
            'CustomScaleValuesDataType', numerictype(1,N,F), ...
            'CustomAccumulatorDataType', numeric_iir, ...
            'CustomOutputDataType', numeric_iir);
    end

    if isempty(LP_dsp)
        LP_dsp = dsphdl.BiquadFilter(...
            'Numerator', S.sos_lp(:,1:3), 'Denominator', S.sos_lp(:,4:6), ...
            'ScaleValues', S.g_lp, 'Structure', 'Direct form II', ...
            'NumeratorDataType', 'Custom', 'DenominatorDataType', 'Custom', ...
            'ScaleValuesDataType', 'Custom', ...
            'AccumulatorDataType', 'Custom', 'OutputDataType', 'Custom', ...
            'CustomNumeratorDataType', numerictype(1,N,F), ...
            'CustomDenominatorDataType', numerictype(1,N,F), ...
            'CustomScaleValuesDataType', numerictype(1,N,F), ...
            'CustomAccumulatorDataType', numeric_iir, ...
            'CustomOutputDataType', numeric_iir);
    end

    if isempty(der_dsp)
        der_dsp = dsphdl.FIRFilter(...
            'Numerator', S.b_der, ...
            'FilterStructure', 'Direct form transposed', ...
            'CoefficientsDataType', numerictype(1,N,F), ...
            'OutputDataType', numeric_fir);
    end

    if isempty(int_dsp)
        int_dsp = dsphdl.FIRFilter(...
            'Numerator', S.b_int, ...
            'FilterStructure', 'Direct form transposed', ...
            'CoefficientsDataType', numerictype(1,N,F), ...
            'OutputDataType', numeric_fir);
    end

    if isempty(int_dsp)
        int_dsp = dsphdl.FIRFilter(...
            'Numerator', S.b_int, ...
            'FilterStructure', 'Direct form transposed', ...
            'CoefficientsDataType', numerictype(1,N,F), ...
            'OutputDataType', numeric_fir);
    end

    if isempty(fir_lp_dsp)
        fir_lp_dsp = dsphdl.FIRFilter(...
            'Numerator', S.b_fir31, ...
            'FilterStructure', 'Direct form transposed', ...
            'CoefficientsDataType', numerictype(1,N,F), ...
            'OutputDataType', numeric_fir);
    end
        
        dataIn0=fi(dataIn, 1, 32, 0);
        dataIn0=bitsliceget(dataIn0, 16,1);
        % Pan-Tompkins pipeline
        [notchOut, valid0] = notch_dsp(dataIn0, validIn);
        [lpOut, valid1] = LP_dsp(notchOut, valid0);
        [hpOut, valid2] = HP_dsp(lpOut, valid1);
        [derOut, valid3] = der_dsp(hpOut, valid2);
        sqOut = fi(derOut.*derOut, numeric_fir);
        [intOut, valid4] = int_dsp(sqOut, valid3);
        [fir_lp_out, valid_fir_lp] = fir_lp_dsp(notchOut,valid0);
        dataOut = intOut;
        validOut = valid4;
end

